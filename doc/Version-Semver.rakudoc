=begin pod

=head1 NAME

Version::Semver - Implement Semver Version logic

=head1 SYNOPSIS

=begin code :lang<raku>
use Version::Semver;

my $left  = Version::Semver.new("1.0.0");
my $right = Version::Semver.new("1.1.0");

# method interface
say $left.cmp($right);  # Less
say $left."<"($right);  # True

# infix interface
say $left cmp $right;  # Less
say $left < $right;    # True
=end code

=head1 DESCRIPTION

The C<Version::Semver> distribution provides a C<Version::Semver>
class which encapsulates the logic for creating a C<Version>-like
object with semantics matching the
L<Semantic Versioning 2.0.0|https://semver.org/spec/v2.0.0.html>
standard.

=head1 INSTANTIATION

=begin code :lang<raku>
use Version::Semver;

my $sv = Version::Semver.new("1.2.3-pre.release+build.data");
=end code

The basic instantion of a C<Version::Semver> object is done with
the C<new> method, taking the version string as a positional argument.

=head1 ACCESSORS

=head2 major

=begin code :lang<raku>
my $sv = Version::Semver.new("1.2.3");
say $sv.major;  # 1
=end code

Returns the major version value.

=head2 minor

=begin code :lang<raku>
my $sv = Version::Semver.new("1.2.3");
say $sv.minor;  # 2
=end code

Returns the minor version value.

=head2 patch

=begin code :lang<raku>
my $sv = Version::Semver.new("1.2.3");
say $sv.patch;  # 3
=end code

Returns the patch value.

=head2 pre-release

=begin code :lang<raku>
my $sv = Version::Semver.new("1.2.3-foo.bar");
say $sv.pre-release;  # (foo bar)
=end code

Returns a C<List> with the pre-release tokens.

=head2 build

=begin code :lang<raku>
my $sv = Version::Semver.new("1.2.3+build.data");
say $sv.build;  # (build data)
=end code

Returns a C<List> with the build tokens.

=head1 OTHER METHODS

=head2 cmp

=begin code :lang<raku>
my $left  = Version::Semver.new("1.0.0");
my $right = Version::Semver.new("1.1.0");

say $left.cmp($left);   # Same
say $left.cmp($right);  # Less
say $right.cmp($left);  # More
=end code

The C<cmp> method returns the C<Order> of a comparison of the invocant
and the positional argument, which is either C<Less>, C<Same>, or
C<More>.  This method is the workhorse for comparisons.

=head2 eqv

=begin code :lang<raku>
my $left  = Version::Semver.new("1.0.0");
my $right = Version::Semver.new("1.0.0+build.data");

say $left.eqv($right);  # True
=end code

The C<eqv> method returns whether the internal state of two
C<Version::Semver> objects is identical.  Note that does not
necessarily means that their stringification is the same, as any
build data is ignored in these comparisons.

=head2 == != < <= > >=

=begin code :lang<raku>
my $left  = Version::Semver.new("1.2.3");
my $right = Version::Semver.new("1.2.4");

say $left."=="($left);  # True
say $left."<"($right);  # True
=end code

These oddly named methods provide the same functionality as their
infix counterparts.  Please note that you B<must> use the C<"xx"()>
syntax, because otherwise the Raku compiler will assume you've made
a syntax error.

=head1 EXPORTED INFIXES

The following C<infix> candidates handling C<Version::Semver> are exported:
=item cmp (returns C<Order>)
=item eqv == != < <= > >= (returns C<Bool>)

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Version-Semver .
Comments and Pull Requests are welcome.

If you like this module, or what Iâ€™m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/> would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
